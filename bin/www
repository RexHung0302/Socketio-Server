#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { v4: uuidv4 } = require("uuid");
const moment = require("moment");

var app = require("../app");
var debug = require("debug")("socketiov2:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require("socket.io")(server);

// Namespace 用法
// const chatRoomV2 = io.of("/chat-room-v2");
// chatRoomV2.on("connection", (socket) => {})

// Socket.io
let users = [];
let chatRooms = [
  {
    id: uuidv4(),
    name: "新手村一",
    desc: "菜雞才能來喔！",
  },
  {
    id: uuidv4(),
    name: "無差別",
    desc: "不管你是什麼雞都可以來～",
  },
];

// Default Namespace(預設的 io 頻道)
io.on("connection", (socket) => {
  // 登入
  socket.on("login", ({ id, name }) => {
    const sameUser = users.find((user) => {
      return user.name === name;
    });

    if (sameUser) {
      socket.emit("connectionFail", {
        success: false,
        message: "使用者名稱重複",
      });
    } else {
      socket.join(id);

      socket.emit("connectionSuccess", {
        success: true,
        message: "歡迎！連線成功",
        rooms: chatRooms,
      });

      // 給除了這個使用者外的其他人
      // socket.broadcast.emit("connectionSuccess", {
      //   success: true,
      //   message: "歡迎！連線成功222",
      // });

      users.push({
        id,
        name,
      });

      // 推播最新線上人數 及 房間資訊
      updateInfo();
    }
  });

  // 登出
  socket.on("disconnectLobby", ({ id }) => {
    users = users.filter((user) => user.id !== id.toString());

    socket.leave(id);

    // 推播最新線上人數
    updateInfo();
  });

  // 更新人數
  socket.on("updateInfo", () => {
    updateInfo();
  });

  // 使用者進入房間
  socket.on("joinChatRoom", ({ id, name, roomId }) => {
    const selectRoom = chatRooms.find((room) => room.id === roomId);
    if (!selectRoom) return;

    socket.join(selectRoom.id);

    // 傳給特定使用者的訊息
    io.to(id).emit("roomMsgEmit", {
      id: "announcement",
      name: "announcement",
      data: {
        type: "text",
        text: `您已成功已加入聊天室`,
      },
      create_at: moment().format("YYYY-MM-DD HH:mm:ss"),
    });

    // 傳給該使用者以外的其他使用者(且只有這間房間的人)
    socket.broadcast.to(selectRoom.id).emit("roomMsgEmit", {
      id: "announcement",
      name: "announcement",
      data: {
        type: "text",
        text: `${name}已加入聊天室`,
      },
      create_at: moment().format("YYYY-MM-DD HH:mm:ss"),
    });
  });

  // 使用者離開房間
  socket.on("disconnectChatRoom", ({ id, name, roomId }) => {
    const selectRoom = chatRooms.find((room) => room.id === roomId);
    if (!selectRoom) return;

    socket.leave(selectRoom.id);

    io.to(selectRoom.id).emit("roomMsgEmit", {
      id: "announcement",
      name: "announcement",
      data: {
        type: "text",
        text: `${name}已離開聊天室`,
      },
      create_at: moment().format("YYYY-MM-DD HH:mm:ss"),
    });
  });

  // 使用者發訊息
  socket.on("clientSendMessage", ({ id, name, data, create_at, modeInfo }) => {
    if (!modeInfo.mode && !modeInfo.roomId) return;

    if (modeInfo.mode === "room") {
      const selectRoom = chatRooms.find((room) => room.id === modeInfo.roomId);
      if (!selectRoom) return;

      io.to(selectRoom.id).emit("roomMsgEmit", {
        id,
        name,
        data,
        create_at,
      });
    }
  });

  // 使用者創建房間
  socket.on("createNewChatRoom", ({ userId, name, desc }) => {
    const sameRoomName = chatRooms.filter((room) => room.name === name);
    const user = users.filter((user) => user.id === userId);

    if (!user) return;

    if (sameRoomName && sameRoomName.length > 0) {
      io.to(userId).emit("personalAnnouncement", {
        data: {
          type: "text",
          text: "新增失敗",
        },
        create_at: moment().format("YYYY-MM-DD HH:mm:ss"),
      });
    } else {
      chatRooms.push({
        id: uuidv4(),
        name,
        desc: desc ? desc : "這間房間尚無敘述",
      });

      io.to(userId).emit("personalAnnouncement", {
        data: {
          type: "text",
          text: "新增成功",
        },
        create_at: moment().format("YYYY-MM-DD HH:mm:ss"),
      });

      // 推播最新線上人數
      updateInfo();
    }
  });

  // 發送訊息
  socket.on("sendMessage", (data) => {
    io.emit("getAllMessage", data);
  });
});

const updateInfo = () => {
  // 推播最新線上人數 及 房間資訊
  io.emit("updateInfo", {
    chatRooms,
    userNumber: users.length,
  });
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

// 輸出 io 可讓其他檔案或是 API 處使用
function getSocketIo() {
  return io;
}

function cleanChatRooms() {
  chatRooms = [];
}

module.exports.getSocketIo = getSocketIo;
module.exports.cleanChatRooms = cleanChatRooms;
module.exports.updateSocketInfo = updateInfo;
